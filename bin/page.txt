  // private boolean locatedFood() {
  //   int i = posI;
  //   int j = posJ;
  //   if (Map.phermoneValue[posI][posJ][2] > 0) {}

  //   return false;
  // }

  // private void findNextMove() {
  //   int i = 0;
  //   int j = 0;
  //   int state = 0;

  //   if (Map.grid[posI][posJ] == 1) {
  //     state = 1;

  //     //choosing next random position
  //     i = (int) (Math.random() * 2);
  //     if (i == 0) {
  //       j = -1;
  //     } else {
  //       j = (int) (Math.random() * 2) - 1;
  //     }

  //     //

  //     if (isValidMove(i, j)) {
  //       posI += i;
  //       posJ += j;
  //       if (i + j == -1) {
  //         Map.grid[posI][posJ] = 2;
  //       } else if (i + j == 0) {
  //         Map.grid[posI][posJ] = 1;
  //       } else if (i + j == 1) {
  //         Map.grid[posI][posJ] = 4;
  //       }
  //     }
  //   } else if (Map.grid[posI][posJ] == 2) {
  //     state = 1;

  //     i = (int) (Math.random() * 3) - 1;
  //     j = -1;

  //     if (isValidMove(i, j)) {
  //       posI += i;
  //       posJ += j;
  //       if (i == -1) {
  //         Map.grid[posI][posJ] = 3;
  //       } else if (i == 0) {
  //         Map.grid[posI][posJ] = 2;
  //       } else if (i == 1) {
  //         Map.grid[posI][posJ] = 1;
  //       }
  //     }
  //   } else if (Map.grid[posI][posJ] == 3) {
  //     state = 1;

  //     i = (int) (Math.random() * 2) - 1;

  //     if (i == 0) {
  //       j = -1;
  //     } else {
  //       j = (int) (Math.random() * 2) - 1;
  //     }

  //     if (isValidMove(i, j)) {
  //       posI += i;
  //       posJ += j;
  //       if (i + j == -2) {
  //         Map.grid[posI][posJ] = 3;
  //       } else if (i == -1) {
  //         Map.grid[posI][posJ] = 5;
  //       } else {
  //         Map.grid[posI][posJ] = 2;
  //       }
  //     }
  //   } else if (Map.grid[posI][posJ] == 4) {
  //     i = 1;
  //     j = (int) (Math.random() * 3) - 1;

  //     if (isValidMove(i, j)) {
  //       posI += i;
  //       posJ += j;
  //       if (j == 1) {
  //         Map.grid[posI][posJ] = 6;
  //       } else if (j == 0) {
  //         Map.grid[posI][posJ] = 4;
  //       } else {
  //         Map.grid[posI][posJ] = 1;
  //       }
  //     }
  //   } else if (Map.grid[posI][posJ] == 5) {
  //     i = -1;
  //     j = (int) (Math.random() * 3) - 1;

  //     if (isValidMove(i, j)) {
  //       posI += i;
  //       posJ += j;
  //       if (j == 1) {
  //         Map.grid[posI][posJ] = 8;
  //       } else if (j == 0) {
  //         Map.grid[posI][posJ] = 5;
  //       } else {
  //         Map.grid[posI][posJ] = 3;
  //       }
  //     }
  //   } else if (Map.grid[posI][posJ] == 6) {
  //     i = (int) (Math.random() * 2);

  //     if (i == 0) {
  //       j = 1;
  //     } else {
  //       j = (int) (Math.random() * 2);
  //     }

  //     if (isValidMove(i, j)) {
  //       posI += i;
  //       posJ += j;
  //       if (i + j == 2) {
  //         Map.grid[posI][posJ] = 6;
  //       } else if (j == 0) {
  //         Map.grid[posI][posJ] = 4;
  //       } else {
  //         Map.grid[posI][posJ] = 7;
  //       }
  //     }
  //   } else if (Map.grid[posI][posJ] == 7) {
  //     i = (int) (Math.random() * 3) - 1;
  //     j = 1;

  //     if (isValidMove(i, j)) {
  //       posI += i;
  //       posJ += j;
  //       if (i == -1) {
  //         Map.grid[posI][posJ] = 8;
  //       } else if (i == 0) {
  //         Map.grid[posI][posJ] = 7;
  //       } else {
  //         Map.grid[posI][posJ] = 6;
  //       }
  //     }
  //   } else if (Map.grid[posI][posJ] == 8) {
  //     i = (int) (Math.random() * 2) - 1;

  //     if (i == 0) {
  //       j = 1;
  //     } else {
  //       j = (int) (Math.random() * 2);
  //     }

  //     if (isValidMove(i, j)) {
  //       posI += i;
  //       posJ += j;
  //       if (i + j == -1) {
  //         Map.grid[posI][posJ] = 5;
  //       } else if (i + j == 1) {
  //         Map.grid[posI][posJ] = 7;
  //       } else {
  //         Map.grid[posI][posJ] = 8;
  //       }
  //     }
  //   } else {
  //     System.out.println("------NOTHING HAPEND-------");
  //   }
  // }

  // private void actuallyMove(int oldI, int oldJ) {
  //   if (oldI != posI || oldJ != posJ) {
  //     Map.numAnts[oldI][oldJ] -= 1;
  //     if (Map.numAnts[oldI][oldJ] <= 0) { //if another ant at position dont change anything
  //       if (hasFood) {
  //         Map.phermoneValue[oldI][oldJ][2] = 255;
  //         Phermones.foodPheromones(oldI, oldJ);
  //       } else {
  //         Phermones.nestPheromones(oldI, oldJ);
  //         Map.phermoneValue[oldI][oldJ][1] = 255;
  //       }
  //     }
  //   }
  // }

  // public void antMovementTest() {
  //   int oldI = posI;
  //   int oldJ = posJ;

  //   if (!locatedFood()) {
  //     findNextMove();
  //   }

  //   actuallyMove(oldI, oldJ);

  //   Map.changePanel(posI, posJ, Color.black); // move ant to new position
  //   Map.numAnts[posI][posJ] += 1;

  //   Map.phermoneValue[posI][posJ][1] = -1;
  // }
  // if (isValidMove(tempI + 1, tempJ)) {
  //   if (Map.phermoneValue[tempI + 1][tempJ][2] > phemoneVal) {
  //     phemoneVal = Map.phermoneValue[tempI][tempJ][2];
  //   }
  // } else if (isValidMove(tempI, tempJ - 1)) {
  //   if (Map.phermoneValue[tempI][tempJ - 1][2] > phemoneVal) {
  //     phemoneVal = Map.phermoneValue[tempI][tempJ][2];
  //   }
  // } else if (isValidMove(tempI + 1, tempJ - 1)) {
  //   if (Map.phermoneValue[tempI + 1][tempJ - 1][2] > phemoneVal) {
  //     phemoneVal = Map.phermoneValue[tempI][tempJ][2];
  //   }
  // } case 1:
        x = (int) (Math.random() * 2);
        y = x == 0 ? -1 : (int) (Math.random() * 2) - 1;
        switch (x + y) { // cacluating next state
          case -1:
            state = 2;
            break;
          case 0:
            state = 1;
            break;
          case 1:
            state = 4;
            break;
        }
        break;
      case 2:
        x = (int) (Math.random() * 3) - 1;
        y = -1;
        switch (x + y) { // cacluating next state
          case -2:
            state = 3;
            break;
          case -1:
            state = 2;
            break;
          case 0:
            state = 1;
            break;
        }
        break;
      case 3:
        x = (int) (Math.random() * 2) - 1;
        y = x == 0 ? -1 : (int) (Math.random() * 2) - 1;
        switch (x + y) { // cacluating next state
          case -2:
            state = 3;
            break;
          default:
            state = (x == -1) ? 5 : 2;
            break;
        }
        break;
      case 4:
        x = 1;
        y = (int) (Math.random() * 3) - 1;
        switch (x + y) { // cacluating next state
          case 2:
            state = 6;
            break;
          case 1:
            state = 4;
            break;
          case 0:
            state = 1;
            break;
        }
        break;
      case 5:
        x = -1;
        y = (int) (Math.random() * 3) - 1;
        switch (x + y) { // cacluating next state
          case 0:
            state = 8;
            break;
          case -1:
            state = 5;
            break;
          case -2:
            state = 3;
            break;
        }
        break;
      case 6:
        x = (int) (Math.random() * 2);
        y = x == 0 ? 1 : (int) (Math.random() * 2);
        switch (x + y) { // cacluating next state
          case 2:
            state = 6;
            break;
          default:
            state = (x == 1) ? 4 : 7;
            break;
        }
        break;
      case 7:
        x = (int) (Math.random() * 3) - 1;
        y = 1;
        switch (x + y) { // cacluating next state
          case 0:
            state = 8;
            break;
          case 1:
            state = 7;
            break;
          case 2:
            state = 6;
            break;
        }
        break;
      case 8:
        x = (int) (Math.random() * 2) - 1;
        y = x == 0 ? 1 : (int) (Math.random() * 1);
        switch (x + y) { // cacluating next state
          case -1:
            state = 5;
            break;
          case 0:
            state = 8;
            break;
          case 1:
            state = 7;
            break;
        }
        break;